(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{130:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return p}));var o=n(1),a=n(6),i=(n(0),n(145)),r={id:"custom-transition",title:"Define a custom enter and exit transition",sidebar_label:"Define a custom enter and exit transition"},s={id:"custom-transition",title:"Define a custom enter and exit transition",description:"The toast relies on `react-transition-group` for the enter and exit transition. Any transition built with react-transition-group should work!\r",source:"@site/docs\\custom-transition.md",permalink:"/react-toastify/custom-transition",editUrl:"https://github.com/shivanshBTW/material-react-toastify-doc/edit/master/docs/custom-transition.md",sidebar_label:"Define a custom enter and exit transition",sidebar:"someSidebar",previous:{title:"Replace the default transition",permalink:"/react-toastify/replace-default-transition"},next:{title:"Drag to remove",permalink:"/react-toastify/drag-to-remove"}},c=[{value:"Using the cssTransition helper",id:"using-the-csstransition-helper",children:[{value:"Different duration for enter and exit",id:"different-duration-for-enter-and-exit",children:[]},{value:"Handle transition based on the toast position",id:"handle-transition-based-on-the-toast-position",children:[]},{value:"Prevent the toast from collapsing after the exit animation",id:"prevent-the-toast-from-collapsing-after-the-exit-animation",children:[]},{value:"Tweak collapse duration",id:"tweak-collapse-duration",children:[]}]},{value:"Create a transition with the Transition component",id:"create-a-transition-with-the-transition-component",children:[]}],l={rightToc:c};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(o.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"The toast relies on ",Object(i.b)("inlineCode",{parentName:"p"},"react-transition-group")," for the enter and exit transition. Any transition built with react-transition-group should work!"),Object(i.b)("p",null,"I'll use the zoom animation from animate.css to build a custom transition"),Object(i.b)("p",null,Object(i.b)("img",Object(o.a)({parentName:"p"},{src:"https://user-images.githubusercontent.com/5574267/31049179-0d52e14c-a62e-11e7-9abd-b0d169a0fadc.gif",alt:"toastify_custom_trans"}))),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-css"}),"/* style.css*/\n@keyframes zoomIn {\n  from {\n    opacity: 0;\n    transform: scale3d(.3, .3, .3);\n  }\n\n  50% {\n    opacity: 1;\n  }\n}\n\n.zoomIn {\n  animation-name: zoomIn;\n}\n\n@keyframes zoomOut {\n  from {\n    opacity: 1;\n  }\n\n  50% {\n    opacity: 0;\n    transform: scale3d(.3, .3, .3);\n  }\n\n  to {\n    opacity: 0;\n  }\n}\n")),Object(i.b)("h2",{id:"using-the-csstransition-helper"},"Using the cssTransition helper"),Object(i.b)("p",null,"The easiest way to roll your own transition is by using the ",Object(i.b)("inlineCode",{parentName:"p"},"cssTransition")," helper. Doing so you don't need to deal with ",Object(i.b)("inlineCode",{parentName:"p"},"react-transition-group"),". You only need to provide the ",Object(i.b)("inlineCode",{parentName:"p"},"enter")," and the ",Object(i.b)("inlineCode",{parentName:"p"},"exit")," class name, the transition ",Object(i.b)("inlineCode",{parentName:"p"},"duration")," is set\nto ",Object(i.b)("inlineCode",{parentName:"p"},"750ms")," by default but it can be overridden.\nThe ",Object(i.b)("inlineCode",{parentName:"p"},"cssTransition")," will also take care to collapse the toast when they exited."),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"import React from 'react';\nimport { toast, cssTransition } from 'material-react-toastify';\nimport './style.css';\n\nconst Zoom = cssTransition({\n  enter: 'zoomIn',\n  exit: 'zoomOut',\n});\n\nfunction App(){\n  const notify = () => {\n    toast(\"ZoomIn and ZoomOut\", {\n      transition: Zoom,\n    });\n  };\n\n  return <button onClick={notify}>Notify</button>;\n}\n")),Object(i.b)("h3",{id:"different-duration-for-enter-and-exit"},"Different duration for enter and exit"),Object(i.b)("p",null,"If you want the transition duration to be different between the enter and exit transition pass an array:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"const Zoom = cssTransition({\n  enter: 'zoomIn',\n  exit: 'zoomOut',\n  duration: 500 // both transition duration will be 500ms\n});\n\nconst Zoom = cssTransition({\n  enter: 'zoomIn',\n  exit: 'zoomOut',\n  duration: [500, 800] // zoomIn will last 500ms while zoomOut will last 800ms\n});\n")),Object(i.b)("h3",{id:"handle-transition-based-on-the-toast-position"},"Handle transition based on the toast position"),Object(i.b)("p",null,"Some transitions are based on the toast position. This is the case for the default one. If you pass ",Object(i.b)("inlineCode",{parentName:"p"},"appendPosition")," to the ",Object(i.b)("inlineCode",{parentName:"p"},"cssTransition")," helper as shown below, the current position will be appended to the ",Object(i.b)("inlineCode",{parentName:"p"},"enter")," and ",Object(i.b)("inlineCode",{parentName:"p"},"exit")," class name:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"const Zoom = cssTransition({\n  // zoomIn will become zoomIn--top-right or zoomIn--top-left and so on\n  enter: 'zoomIn',\n  // zoomIn will become zoomOut--top-right or zoomOut--top-left and so on\n  exit: 'zoomOut',\n  // default to false\n  appendPosition: true\n});\n")),Object(i.b)("div",{className:"admonition admonition-important alert alert--info"},Object(i.b)("div",Object(o.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(o.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(o.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(o.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"Important")),Object(i.b)("div",Object(o.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"Don't forget to add the position as well when you write your css animations"))),Object(i.b)("h3",{id:"prevent-the-toast-from-collapsing-after-the-exit-animation"},"Prevent the toast from collapsing after the exit animation"),Object(i.b)("p",null,"By default, the remaining toast will collapse smoothly"),Object(i.b)("iframe",{width:"100%",height:"365",src:"https://www.youtube.com/embed/Hui3GZKRDpM",frameborder:"0",allow:"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:!0}),Object(i.b)("p",null,"This can be disabled as well:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"const Zoom = cssTransition({\n  collapse: false,\n  enter: 'zoomIn', \n  exit: 'zoomOut', \n});\n")),Object(i.b)("h3",{id:"tweak-collapse-duration"},"Tweak collapse duration"),Object(i.b)("p",null,"The default duration is 300ms. This is also easy to change \ud83d\udcaa"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"const Zoom = cssTransition({\n  collapseDuration: 500,\n  enter: 'zoomIn', \n  exit: 'zoomOut', \n});\n")),Object(i.b)("h2",{id:"create-a-transition-with-the-transition-component"},"Create a transition with the Transition component"),Object(i.b)("p",null,"You can also use the ",Object(i.b)("inlineCode",{parentName:"p"},"Transition")," component from react-transition-group if you want more control."),Object(i.b)("p",null,"When you create your own transition the following props are passed:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"in: this tell if the component is visible or not (same as react-transition-group)"),Object(i.b)("li",{parentName:"ul"},"appear: this tell to animate the component when it's visible (same as react-transition-group)"),Object(i.b)("li",{parentName:"ul"},"nodeRef: the node ref.(same as react-transition-group)"),Object(i.b)("li",{parentName:"ul"},"done: this callback should be called at the end of your transition"),Object(i.b)("li",{parentName:"ul"},"position: the toast position"),Object(i.b)("li",{parentName:"ul"},"preventExitTransition: this will be true if the toast has been closed by a drag event")),Object(i.b)("p",null,"In the example below we will reimplement the ",Object(i.b)("inlineCode",{parentName:"p"},"cssTransition")," helper."),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"import React from 'react';\nimport { toast, collapseToast } from 'material-react-toastify';\nimport { Transition } from 'react-transition-group';\n\n\nconst ZoomInAndOut = ({ children, position, done, nodeRef ...props }) => {\n  const node = nodeRef.current;\n\n  const onEnter = () => {\n      node.classList.add(\"the class used on enter\");\n      node.style.animationFillMode = 'forwards';\n      node.style.animationDuration = '800ms';\n  }\n\n  // let's clean a bit \ud83e\udd23\n  const onEntered = () => {\n    node.classList.remove(\"the class used on enter\");\n    node.style.cssText = '';\n  }\n\n  const onExit = () => {\n      node.classList.add(exitClassName);\n      node.style.animationFillMode = 'forwards';\n      node.style.animationDuration = '800ms';\n      // listen for our exit animation to finish and trigger collapseStart\n      node.addEventListener('animationend', onCollapseStart)\n  };\n\n  const onCollapseStart = () => {\n    collapseToast(node, done, 300);\n    // clean the listener\n    node.removeEventListener('animationend', onCollapseStart);\n  };\n\n  // specify the duration of the animation. For the exit, we add collapse duration as well\n  const timeout = {\n    enter: 800, \n    exit: 800 + 300 \n  }\n\n  return (\n    <Transition\n      {/* spread remaining props: in, appear */}\n      {...props}\n      unmountOnExit\n      nodeRef={nodeRef}\n      {/* toast has been closed by drag, no animation need */}\n      timeout={ preventExitTransition ? 0 : timeout}\n      onEnter={onEnter}\n      onEntered={onEntered}\n      {/* if toast has been closed by drag don't animate */}\n      onExit={preventExitTransition ? done : onExit}\n  >\n    {children}\n  </Transition>    \n  )\n};\n")),Object(i.b)("p",null,"This can seem intimidating but if you know react-transition-group, this is really straightforward."),Object(i.b)("p",null,"Of course, you could also the CSSTransition component if you wish."))}p.isMDXComponent=!0},145:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return u}));var o=n(0),a=n.n(o);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),p=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s({},t,{},e)),n},d=function(e){var t=p(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=Object(o.forwardRef)((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,r=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=p(n),b=o,u=d["".concat(r,".").concat(b)]||d[b]||m[b]||i;return n?a.a.createElement(u,s({ref:t},l,{components:n})):a.a.createElement(u,s({ref:t},l))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=b;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,r[1]=s;for(var l=2;l<i;l++)r[l]=n[l];return a.a.createElement.apply(null,r)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);