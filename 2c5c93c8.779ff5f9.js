(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{112:function(t,e,n){"use strict";n.r(e),n.d(e,"frontMatter",(function(){return i})),n.d(e,"metadata",(function(){return c})),n.d(e,"rightToc",(function(){return s})),n.d(e,"default",(function(){return u}));var a=n(1),o=n(6),r=(n(0),n(145)),i={id:"update-toast",title:"Update a toast",sidebar_label:"Update a toast"},c={id:"update-toast",title:"Update a toast",description:"When you update a toast, the toast options and the content are inherited but don't worry you can update them as well.\r",source:"@site/docs\\update-toast.md",permalink:"/react-toastify/update-toast",editUrl:"https://github.com/shivanshBTW/material-react-toastify-doc/edit/master/docs/update-toast.md",sidebar_label:"Update a toast",sidebar:"someSidebar",previous:{title:"Use a controlled progress bar",permalink:"/react-toastify/use-a-controlled-progress-bar"},next:{title:"Define callback",permalink:"/react-toastify/define-callback"}},s=[{value:"Basic example",id:"basic-example",children:[]},{value:"Update the content",id:"update-the-content",children:[]},{value:"Update the toast id",id:"update-the-toast-id",children:[]},{value:"Apply a transition",id:"apply-a-transition",children:[]},{value:"Reset option or inherit from ToastContainer",id:"reset-option-or-inherit-from-toastcontainer",children:[]}],p={rightToc:s};function u(t){var e=t.components,n=Object(o.a)(t,["components"]);return Object(r.b)("wrapper",Object(a.a)({},p,n,{components:e,mdxType:"MDXLayout"}),Object(r.b)("p",null,"When you update a toast, the toast options and the content are inherited but don't worry you can update them as well."),Object(r.b)("p",null,Object(r.b)("img",Object(a.a)({parentName:"p"},{src:"https://user-images.githubusercontent.com/5574267/33761953-1ce2e0ea-dc0b-11e7-8967-a63c1185ce0e.gif",alt:"update-without-transition"}))),Object(r.b)("h2",{id:"basic-example"},"Basic example"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"import React from 'react';\nimport { toast } from 'material-react-toastify';\n\nfunction Example() {\n  const toastId = React.useRef(null);\n\n  const notify = () => toastId.current = toast(\"Hello\", { autoClose: false });\n\n  const update = () => toast.update(toastId.current, { type: toast.TYPE.INFO, autoClose: 5000 });\n\n  return (\n    <div>\n      <button onClick={notify}>Notify</button>\n      <button onClick={update}>Update</button>\n    </div>\n  );\n}\n")),Object(r.b)("h2",{id:"update-the-content"},"Update the content"),Object(r.b)("p",null,"If you want to change the content it's straightforward as well. You can render any valid element including a react component. Pass your value to a ",Object(r.b)("inlineCode",{parentName:"p"},"render")," option as follow:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),' // With a string\n toast.update(toastId, {\n    render: "New content",\n    type: toast.TYPE.INFO,\n    autoClose: 5000\n  });\n\n// Or with a component\ntoast.update(toastId, {\n    render: MyComponent\n    type: toast.TYPE.INFO,\n    autoClose: 5000\n});\n\ntoast.update(toastId, {\n    render: () => <div>New content</div>\n    type: toast.TYPE.INFO,\n    autoClose: 5000\n});\n')),Object(r.b)("h2",{id:"update-the-toast-id"},"Update the toast id"),Object(r.b)("p",null,"If you want to update the ",Object(r.b)("inlineCode",{parentName:"p"},"toastId")," it can be done. But don't forget to use the new id if you want to update your toast again \ud83d\ude05!"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"const myNewToastId = 'loremIpsum';\n\ntoast.update(toastId, {\n  render: \"New content\",\n  type: toast.TYPE.INFO,\n  autoClose: 5000,\n  toastId: myNewToastId\n});\n\ntoast.update(myNewToastId, {\n  render: MyComponent\n  autoClose: 6000\n}); \n")),Object(r.b)("h2",{id:"apply-a-transition"},"Apply a transition"),Object(r.b)("p",null,"By default, when you update a toast, there is no transition applied. If you want to apply a transition, it can be done via the ",Object(r.b)("inlineCode",{parentName:"p"},"className")," or the ",Object(r.b)("inlineCode",{parentName:"p"},"transition")," option:"),Object(r.b)("p",null,Object(r.b)("img",Object(a.a)({parentName:"p"},{src:"https://user-images.githubusercontent.com/5574267/33761952-1cc9d55a-dc0b-11e7-9a05-29186ea1c1f0.gif",alt:"update-with-transition"}))),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),'// with css\ntoast.update(toastId, {\n  render: "New Content",\n  type: toast.TYPE.INFO,\n  //Here the magic\n  className: \'rotateY animated\'\n})\n\n// with transition\ntoast.update(toastId, {\n  render: "New Content",\n  type: toast.TYPE.INFO,\n  //Here the magic\n  transition: Rotate\n})\n')),Object(r.b)("h2",{id:"reset-option-or-inherit-from-toastcontainer"},"Reset option or inherit from ToastContainer"),Object(r.b)("p",null,"If you want to inherit props from the ",Object(r.b)("inlineCode",{parentName:"p"},"ToastContainer"),", you can reset an option by passing null.\nIt's particularly useful when you remove the ",Object(r.b)("inlineCode",{parentName:"p"},"closeButton")," from a toast and you want it back during the update."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),'function Example(){\n  const toastId = React.useRef(null);\n\n  const notify = () => {\n    toastId.current = toast("Hello", {\n      autoClose: false,\n      closeButton: false // Remove the closeButton\n    });\n  }\n\n  const update = () => {\n    toast.update(toastId.current, {\n      type: toast.TYPE.INFO,\n      autoClose: 5000,\n      closeButton: null // The closeButton defined on ToastContainer will be used\n    });\n  }\n\n  return (\n    <div>\n      <button onClick={notify}>Notify</button>\n      <button onClick={update}>Update</button>\n    </div>\n  );\n}\n')))}u.isMDXComponent=!0},145:function(t,e,n){"use strict";n.d(e,"a",(function(){return l})),n.d(e,"b",(function(){return m}));var a=n(0),o=n.n(a);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function c(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,a,o=function(t,e){if(null==t)return{};var n,a,o={},r=Object.keys(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var p=o.a.createContext({}),u=function(t){var e=o.a.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):c({},e,{},t)),n},l=function(t){var e=u(t.components);return o.a.createElement(p.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return o.a.createElement(o.a.Fragment,{},e)}},b=Object(a.forwardRef)((function(t,e){var n=t.components,a=t.mdxType,r=t.originalType,i=t.parentName,p=s(t,["components","mdxType","originalType","parentName"]),l=u(n),b=a,m=l["".concat(i,".").concat(b)]||l[b]||d[b]||r;return n?o.a.createElement(m,c({ref:e},p,{components:n})):o.a.createElement(m,c({ref:e},p))}));function m(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var r=n.length,i=new Array(r);i[0]=b;var c={};for(var s in e)hasOwnProperty.call(e,s)&&(c[s]=e[s]);c.originalType=t,c.mdxType="string"==typeof t?t:a,i[1]=c;for(var p=2;p<r;p++)i[p]=n[p];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);